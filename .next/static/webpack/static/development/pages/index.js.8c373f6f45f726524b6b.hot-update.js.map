{"version":3,"file":"static/webpack/static/development/pages/index.js.8c373f6f45f726524b6b.hot-update.js","sources":["webpack:///./utils/DefaultDiodeNetworkLayer.js"],"sourcesContent":["import axios from \"axios\";\n\nclass DiodeDefaultNetworkLayer {\n  _baseApiEndpoint;\n\n  _defaultHeaders;\n\n  // TODO accept fetch options\n  constructor(baseApiEndpoint, options) {\n    this._baseApiEndpoint = baseApiEndpoint;\n    this._defaultHeaders = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n  }\n\n  /**\n   * @public\n   *\n   */\n  sendQueries(queryRequests, options) {\n    const requests = queryRequests.map(query => {\n      /* istanbul ignore next */\n      const headers = options.headers ? options.headers : this._defaultHeaders;\n      const { url, method, payload } = query;\n      const apiUrl = `${this._baseApiEndpoint}${url}`;\n      const fetchParams = {\n        url: apiUrl,\n        method,\n        headers: {\n          ...headers,\n          ...query.headers\n        }\n      };\n\n      /* istanbul ignore else */\n      if (typeof payload === \"object\") {\n        // we use JSON.stringify here because this is what most POST request\n        // body looked like. GET requests are usually in form of query string\n        // which should already handled inside apiUrl. Other type of payload,\n        // like urlencodedform should be generated inside query.generate method\n        fetchParams.data = JSON.stringify(payload);\n      } else if (typeof payload === \"string\") {\n        fetchParams.data = payload;\n      }\n\n      return axios(fetchParams).then(response => response);\n    });\n\n    return Promise.all(requests).then(responses => {\n      // Convert array of response into Map<QueryType, QueryResponse>\n      return responses.reduce((responseMap, response, id) => {\n        const { type } = queryRequests[id];\n        responseMap[type] = response;\n        console.log(type);\n        return responseMap;\n      }, {});\n    });\n  }\n}\n\n// module.exports.default = DiodeDefaultNetworkLayer;\nexport default DiodeDefaultNetworkLayer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;AAKA;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAHA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AACA;AADA;;;;A","sourceRoot":""}