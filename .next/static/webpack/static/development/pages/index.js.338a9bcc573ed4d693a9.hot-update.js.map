{"version":3,"file":"static/webpack/static/development/pages/index.js.338a9bcc573ed4d693a9.hot-update.js","sources":["webpack:///./components/ImageDisplay.js","webpack:///./pages/index.js","webpack:///./queries/ContentResourceQuery.js","webpack:///./utils/FakeNetworkLayer.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Diode from 'react-diode';\n// import ImageDisplayQuery from '../queries/ImageDisplayQuery';\nimport ContentResourceQuery from '../queries/ContentResourceQuery';\n\nclass ImageDisplay extends Component {\n  render() {\n    console.log(this.props);\n    return (\n      <div>\n        { }\n      </div>\n    );\n  }\n}\n\nexport default Diode.createRootContainer(ImageDisplay, {\n  children: [],\n  queries: {\n    // images: Diode.createQuery(ImageDisplayQuery, {\n    //   image: 'fragment',\n    // }),\n    contentResource: Diode.createQuery(ContentResourceQuery, {\n      hello: {\n        world: null,\n      },\n    }),\n  },\n}); \n","import React from 'react';\nimport Diode from 'react-diode';\n// import axios from 'axios';\n\n// Component\nimport ImageDisplay from '../components/ImageDisplay';\n\n// Diode\nimport DiodeNetworkLayer from '../utils/DefaultDiodeNetworkLayer';\nimport CRNetworkLayer from '../utils/FakeNetworkLayer';\n\n// Diode.injectNetworkLayer(new DiodeNetworkLayer());\nDiode.injectNetworkLayer(new CRNetworkLayer());\n\n/**\n * Store - \n * \n */\n\nclass Home extends React.Component {\n  static async getInitialProps(ctx) {\n    if (ctx.req) {\n      // Diode setup\n      \n      const cache = await Diode.Store.forceFetch(ImageDisplay);\n      \n      // const img = await axios.get('https://jsonplaceholder.typicode.com/photos');\n\n      return { cache };\n    }\n\n    return { cache: window.__NEXT_DATA__.props.pageProps };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.cache = Diode.createCache(props.cache);\n  }\n\n  render () {\n    return (\n      <div>\n        <Diode.CacheProvider value={this.cache}> \n          <ImageDisplay />\n        </Diode.CacheProvider>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import Diode from \"react-diode\";\n\nexport default {\n  type: \"contentResource\",\n  request(fragment, params, options) {\n    const crNames = Object.keys(fragment);\n\n    const contentResources = crNames.map(name => {\n      const entry = fragment[name];\n      const entryKeys = Object.keys(entry);\n      const entries = entryKeys.map(key => {\n        return {\n          key,\n          params: entry[key]\n        };\n      });\n\n      return { name, entries };\n    });\n\n    const url = \"http://localhost:5000/v2/mobile/contentresource\";\n    const method = \"post\";\n    const payload = { contentResources };\n    return Diode.queryRequest(url, method, payload);\n  },\n  resolve(response, fragment, options) {\n    return response.data.contentResources;\n  }\n};\n","export default class FakeNetworkLayer {\n  async sendQueries(queries, options) {\n    const responses = await Promise.all(\n      queries.map(query => {\n        if (query.type !== \"contentResource\") {\n          throw new Error(\"Only contentResource query for demo\");\n        }\n\n        const fakeContentResource = {};\n        const keys = query.payload.contentResources;\n        keys.forEach(key => {\n          fakeContentResource[key.name] = {};\n          key.entries.forEach(entry => {\n            if (entry.params === null) {\n              fakeContentResource[key.name][entry.key] = `${key.name}, ${\n                entry.key\n              }!`;\n            } else {\n              fakeContentResource[key.name][entry.key] = `${key.name}, ${\n                entry.key\n              } ${entry.params}!`;\n            }\n          });\n        });\n\n        return {\n          type: query.type,\n          data: {\n            data: {\n              contentResources: fakeContentResource\n            }\n          }\n        };\n      })\n    );\n\n    return responses.reduce((result, response) => {\n      result[response.type] = response.data;\n      return result;\n    }, {});\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAJA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;AAKA;;;;;;;;;;AACA;;;;;;AACA;;;;;;AAGA;AACA;;AADA;AAIA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA7BA;AACA;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;;;;;;;;;;;;AACA;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AADA;AAFA;AAQA;AACA;;AAhCA;AAkCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}