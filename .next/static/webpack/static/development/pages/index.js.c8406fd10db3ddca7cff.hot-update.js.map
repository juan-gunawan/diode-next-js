{"version":3,"file":"static/webpack/static/development/pages/index.js.c8406fd10db3ddca7cff.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react';\nimport Diode from 'react-diode';\n\n// Component\nimport ImageDisplay from '../components/ImageDisplay';\n\n// Diode\nimport DiodeNetworkLayer from '../utils/DefaultDiodeNetworkLayer';\n// import CRNetworkLayer from '../utils/FakeNetworkLayer';\n\nDiode.injectNetworkLayer(new DiodeNetworkLayer());\n// Diode.injectNetworkLayer(new CRNetworkLayer());\n\nclass Home extends React.Component {\n  static async getInitialProps(ctx) {\n    if (ctx.req) {\n      // Diode setup\n      // const cache = await Diode.Store.forceFetch(ImageDisplay);\n\n      // return { \n      //   cache,\n      //   isServer: true, \n      // };\n    }\n    \n    return { cache: window.__NEXT_DATA__.props.pageProps.cache, isServer: false };\n  }\n\n  constructor(props) {\n    super(props);\n\n    const cache = props.cache;\n\n    if (!props.isServer && !props.cache) {\n      cache = window.__NEXT_DATA__.props.pageProps.cache\n    }\n\n    this.cache = Diode.createCache(cache);\n  }\n\n  render () {\n    return (\n      <div>\n        <Diode.CacheProvider value={this.cache}> \n          <ImageDisplay />\n        </Diode.CacheProvider>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;AACA;;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAnCA;AACA;AAqCA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}